

============================================
Loading clouds and other entities from files
============================================

Known formats
-------------

Entities known by CloudComPy are mainly PointClouds, triangular meshes, polylines...

CloudComPy can read a lot of formats of point clouds and meshes.
The ``.bin`` binary format is the native format of CloudCompare and can store several entities of all types.
Have a look to the the details of formats handled by CloudCompare on `wiki <https://www.cloudcompare.org/doc/wiki/index.php/FILE_I/O>`_.

For clouds, the extensions known by CloudComPy are:
``.asc`` ``.bin`` ``.drc`` ``.dxf`` ``.E57`` ``.las`` ``.laz`` ``.pcd`` ``.ply`` ``.sbf`` ``.shp`` ``.vtk`` ``.xyz``

For meshes: 
``.dxf`` ``.bin`` ``.fbx``  ``.obj`` ``.off`` ``.ply`` ``.stl`` ``.vtk`` 

For polylines:
``.dxf`` ``.georef`` ``.obj`` ``.poly`` ``.sx`` ``.shp``

Load without explicit shift parameters
--------------------------------------

By default, CloudCompare applies an automatic coordinates shift to recenter the objects and avoid a loss of precision.
This is transparent for the user, and the best option unless you need to load several entities while keeping the same shift.
In that case, see see :ref:`loadParameters-label` below.

For all the examples below, we can use the examples generated by autotests, which are, by default,
in the subdirectory CloudComPy/Data of your Home. Let's first change the working directort to your HOME.

::

    os.chdir(os.path.expanduser("~"))


Loading a point cloud (from the examples generated by autotests).
::

    cloud = cc.loadPointCloud("CloudComPy/Data/dataSample_1.0.xyz")
    print(cloud.getName())
    
Loading a mesh
::
    
    mesh = cc.loadMesh("CloudComPy/Data/mesh.stl")
    print(mesh.getName())
  
Loading a polyline
::

    poly = cc.loadPolyline("CloudComPy/Data/poly1.poly")
    print(poly.getName())

Loading a file containing several entities. The result is a tuple (list(mesh), list(cloud)).
The lists can be empty, depending on the content of the file.
For now, CloudComPy detects only meshes and clouds in a ``.bin`` file.
For instance, polylines and facets are imported as clouds, primitives are imported as meshes. 
::

    res = cc.importFile("CloudComPy/Data/meshCloud.bin")
    meshes = res[0]
    clouds = res[1]
    for mesh in meshes:
        print(mesh.getName())
    for cloud in clouds:
        print(cloud.getName())

.. _loadParameters-label:

Load with explicit shift parameters
-----------------------------------

when you need to load several entities and apply the same shift, the best solution is to use the option ``mode=cc.CC_SHIFT_MODE.XYZ``
followed by the x,y and/or z non null shifts.
::

    cloud1 = cc.loadPointCloud(filename="CloudComPy/Data/dataSample_5.0.xyz", mode=cc.CC_SHIFT_MODE.XYZ, x=3, z=10)
    res = cc.importFile(filename="CloudComPy/Data/dataSample_1.0.xyz", mode=cc.CC_SHIFT_MODE.XYZ, x=3, z=10)
    cloud2 = res[1][0]
    mesh = cc.loadMesh(filename="CloudComPy/Data/mesh.stl", mode=cc.CC_SHIFT_MODE.XYZ, x=3, z=10)

**WARNING** Shift parameters are not always taken into account, depending on the type of file,
shift values, following the internal rules of CloudCompare: when using the CloudCompare GUI,
shift dialog at import is not always available.
When the shift dialog is not proposed in the GUI, shift parameters are likely not taken into account in CloudCompare.


